//describe globals
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
	float specularPower;
	float4 specularColor;
	float4 ambientColor;

};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


//Pixel shader start
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	color = ambientColor;	

	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));
	
	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

		color = saturate(color);

		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		//find amount of specular light based on reflection vector, viewing direction, and power
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }


    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	color = saturate(color + specular);

    return color;
}
